<template>
   <section class="${pathName}-wrapper">
      <table-base
         ref="${classname}"
         :height="initialHeight"
         :columns="columns"
         :fetch-data-async="fetchTableDataAsync">

         <template slot="actionBar">
            <el-button icon="el-icon-plus" @click="createRecord()">添加记录</el-button>
            <el-button type="primary" @click="refresh">刷新</el-button>
         </template>
      </table-base>

      <el-dialog :title="dialog.title" :visible.sync="dialog.visible" width="50%" :close-on-click-modal="false">
         <el-form :model="${className}Model" ref="${className}Entity">
#foreach($column in $columns)
            <el-form-item
                label="${column.attrname}"
                prop="${column.attrname}"
                :rules="[{required: true, message: '请输入${column.attrname}', trigger:'blur'}]"
                :label-width="dialog.labelWidth">
                <el-input v-model="${className}Model.${column.attrname}"></el-input>
             </el-form-item>
#end
        </el-form>
        <div slot="footer" class="dialog-footer">
            <el-button @click="dialog.visible = false">取 消</el-button>
            <el-button type="primary" @click="submit${className}Model">确 定</el-button>
        </div>
    </el-dialog>
  </section>
</template>

<script>
import TableBase from '@/assets/package/table-base'
import '@/assets/package/style/index.scss'
import ${className}API from '@/api/${pathName}'

export default {
   data() {
      return {
        initialHeight: 500,
        query: {
          page: 1,
          limit: 10
        },
        dialog: {
          title: '新增',
          visible: false,
          status: 0,
          labelWidth: '100px'
        },
        ${className}Model: {

        },
        columns: [
#foreach($column in $columns)
        {
          label: '${column.attrname}',
          prop: '${column.attrname}',
          align: 'center'
        },
#end
          {
            label: '操作',
            renderToolBox: this.getToolboxRender,
            align: 'center'
          }
        ]
      }
    },
   components: {
      TableBase
   },
   watch: {
      'dialog.visible'(visible) {
        if (visible === false) {
           this.#[[$]]#refs['${className}Entity'].resetFields()
        }
      }
   },
   methods: {
      getToolboxRender (h, {id}) {
         return [
            <el-button icon = "el-icon-edit" onClick = {() => this.editRecord(id) }></el-button>,
            <el-button icon = "el-icon-delete" onClick = {() => this.deleteRecord(id) }></el-button>
         ]
      },
      async fetchTableDataAsync (pageNo, pageSize) {
         this.query.page = pageNo
         this.query.limit = pageSize
         const response = await
         ${className}API.get${className}List(this.query)
         if (response.code === 0) {
            return {data: response.data.list, total: response.data.total}
         }
       },
      createRecord () {
         this.dialog.visible = true
         this.dialog.status = 0
      },
      editRecord (id) {
         this.dialog.title = '编辑属性'
         this.dialog.visible = true
         this.dialog.status = 1
         ${className}API.get${className}Record(id).then(res => {
           if (res.code === 0) {
             this.${className}Model = res.data
           }
         })
      },
      deleteRecord (id) {
         this.$confirm('确认删除?', {
           confirmButtonText: '确认',
           cancelButtonText: '取消',
           type: 'warning'
         }).then(() => {
             ${className}API.delete${className}Record(id).then(response => {
             this.$message({
               type: response.code === 0 ? 'success' : 'error',
               message: response.code === 0 ? '删除成功' : '删除失败'
             })
             if (response.code === 0) {
               this.refresh()
             }
           })
         }).catch(() => {
            this.$message({
              type: 'info',
              message: '已取消'
            })
         })
      },
      submit${className}Model () {
        this.#[[$]]#refs['${className}Entity'].#[[validate]]#(valids => {
          if (valids) {
            ${className}API.createOrUpdateRecord(this.dialog.status, this.${className}Model).then(response => {
              if (response.code === 0) {
                this.$message({
                  type: 'success',
                  message: '操作成功'
                })
                this.dialog.visible = false
                this.refresh()
              } else {
                this.$message({
                  type: 'error',
                  message: '操作失败'
                })
              }
            })
          }
        })
      },
      refresh () {
         const instance = this.$refs.${classname}.getTablePlusInstance()
         instance.reload()
      }
   }
}
</script>

<style lang="css" scoped>
    .${pathName}-wrapper {
        padding: 20px;
    }
</style>
